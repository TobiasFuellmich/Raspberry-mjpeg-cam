# import the necessary packages
from picamera import PiCamera
import time
from thread import start_new_thread
from os import stat
 
# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.resolution = (640, 360)
camera.framerate = 24
camera.rotation = 0
# camera.image_effect='watercolor'
 
# allow the camera to warmup
time.sleep(1)
 
# capture frames from the camera
def writeinfile(k):
	info=str(k).zfill(4)
	a=k-3
	while a<k-1:
		path ='/var/www/html/vid_stream/vid_parts/frame'+str(a%180).zfill(3)+".jpg"
		st_time=stat(path).st_mtime
		path ='/var/www/html/vid_stream/vid_parts/frame'+str((a+1)).zfill(3)+".jpg"
		strt="%.4f" % (stat(path).st_mtime-st_time)
		info+="/"+strt
		a=a+1
	file = open("/var/www/html/vid_stream/last_m_jpeg_info.lock","w")
	file.write(info)
	file.close()

def positioncheck():
	i=2
	path ='/var/www/html/vid_stream/vid_parts/frame'+str(i).zfill(3)+".jpg"
	st_time=stat(path).st_mtime
	while True:
		path ='/var/www/html/vid_stream/vid_parts/frame'+str(i%180).zfill(3)+".jpg"
		if st_time != stat(path).st_mtime:
			start_new_thread(writeinfile,(i,))
			if i>=180:
				i=0
			i=i+2
			path ='/var/www/html/vid_stream/vid_parts/frame'+str(i%180).zfill(3)+".jpg"
			st_time=stat(path).st_mtime
		time.sleep(0.001)

start_new_thread(positioncheck,())
def ka():
	n=0;
	while n<5000:#number of loops creates lagg after loops -> the higher the less laggs 
		for j in range(0,180):
			yield '/var/www/html/vid_stream/vid_parts/frame%03d.jpg' % j
		n=n+1

while True:
	camera.capture_sequence(ka(), format="jpeg", use_video_port=True, quality=5)

